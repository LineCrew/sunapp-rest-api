swagger: "2.0"
info:
  version: 1.0.0
  title: sunapp-rest-api
  description: sunapp
basePath: /api/v1
tags:
  - name: Examples
    description: Simple example endpoints
  - name: AppQnA
    description: 앱 질문 API
  - name: Receipt
    description: 영수증 관련 API
  - name: Term
    description: 약관 관련 Endpoints.    
  - name: Admin
    description: 관리자 관련 Endpoints
  - name: Problem
    description: "문제 신고"
  - name: FAQ
    description: FAQ Endpoint
  - name: User
    description: User Endpoint
  - name: Game
    description: Game에 관한 Endpoint. 예를 들어, 공무원의 신, 자격증의 신
  - name: Topic
    description: Topic에 관한 Endpoint. 예를 들어, 9급 공무원, 7급 공무원
  - name: Question
    description: 문제, 영역 등을 전부 관리하는 Endpoint. 9급 공무원에 해당하는 국어 문제지를 추가하고 문제지에 질문 아이템을 추가할 수도 있음.
  - name: Specification
    description: The swagger API specification
  - name: Advertise
    description: Advertise Endpoint
  - name: Stuff
    description: Stuff Endpoint
  - name: FCM
    description: FCM!

consumes:
  - application/json
produces:
  - application/json

definitions:
  UserInfoByConditionModel:
    type: object
    properties:
      condition:
        type: string
      userId:
        type: integer
      startDate:
        type: string
        description: 'YYYY-MM-DD 형식임. 조회할 랭킹 범위의 시작점'
      endDate:
        type: string
        description: 'YYYY-MM-DD 형식임. 조회할 랭킹 범위의 끝점'

  DateModel:
    type: object
    properties:
      startDate:
        type: string
      endDate:
        type: string

  LoginModel:
    type: object
    properties:
      email:
        type: string
      password:
        type: string

  ReceiptModel:
    type: object
    properties:
      productName:
        type: string
      type:
        type: string
        description: 무료 및 선물이면 free, 유료이면 purchase 로 할 것.
      price:
        type: integer
      star:
        type: integer

  UpdateQuestionItemsLimitTime:
    type: object
    properties:
      questionItems:
        type: array
        items:
          type: integer
      limitTime:
        type: integer

  AdminProblemAnswerModel:
    type: object
    properties:
      userId:
        type: integer
      answer:
        type: string
  TermModel:
    type: object
    properties:
      term:
        type: string
        description: 약관

  StarModel:
    type: object
    properties:
      star:
        type: integer

  AdminSendStarModel:
    type: object
    properties:
      userIds:
        type: array
        items:
          type: integer
      star:
        type: integer
      message:
        type: string

  AdminSendMessageModel:
    type: object
    properties:
      userIds:
        type: array
        items:
          type: integer
      message:
        type: string

  AdminLoginModel:
    type: object
    properties:
      account:
        type: string
        description: 로그인에 필요한 Id
      password:
        type: string
        description: 로그인에 필요한 Pw
      type:
        type: string
        enum:
          - "admin"

  AdministratorModel:
    type: object
    properties:
      account:
        type: string
        description: 로그인에 필요한 Id
      name:
        type: string
        description: 관리자 이름
      company:
        type: string
        description: 회사 명
      type:
        type: string
        enum: 
          - "user"
          - "admin"
        description: 관리자 계정의 역할
      password:
        type: string
        description: 비밀번호
  MessagePayloadModel:
    type: object
    properties:
      title:
        type: string
        description: title
      body:
        type: string
        description: body

  GamePlayingHistoryModel:
    type: object
    properties: 
      firstUserId:
        type: integer
        description: "userId"
      secondUserId:
        type: integer
        description: "userId"
      questionaireId:
        type: integer
        description: "questionaireId"
      roomId:
        type: string
        description: 일반 게임한 Room Id
      result:
        type: string
        description: 승패 여부, WIN 또는 LOSE 로 표시.
      gameType:
        type: string
        enum: 
          - "random"
          - "single"
          - "friend"
  StuffModel:
    type: object
    properties:
      description:
        type: string
        description: "이벤트 상품 설명, 예: 2018년 1월 1주차 이벤트 상품..."
      isActive:
        type: integer
        description: "상품 활성화 여부"

  FriendsModel:
    type: object
    properties:
      facebookUserIds:
        type: array
        items:
          type: integer

  AdvertiseModel:
    type: object
    properties:
      order:
        type: integer
        description: "광고 순서"
      advertiser:
        type: string
        description: "광고주"
      content:
        type: string
        description: "광고 내용"
      star:
        type: integer
        description: "광고 시청시 지급하는 별"
      link:
        type: string
        description: "광고 시청 URL 링크"

  ProblemModel:
    type: object
    properties:
      question:
        type: string
        description: "자주 묻는 질문"
      email:
        type: string
        description: "답변"

  FaqModel:
    type: object
    properties:
      topic:
        type: string
        description: "FAQ 주제"
      question:
        type: string
        description: "자주 묻는 질문"
      answer:
        type: string
        description: "답변"
      
  TokenModel:
    type: object
    properties:
      currentToken:
        type: string
        description: "이전의 사용되던 액세스 토큰"
      refreshToken:
        type: string
        description: "새로 바뀔 액세스 토큰"

  GamePlayingRequest:
    type: object
    properties:
      userPlayingType:
        type: string
        description: "랜덤, 친구, 싱글 플레이"
      questionaireId:
        type: integer
        description: "풀고자 하는 문제지 Id"
      userId:
        type: integer
        description: "나의 UserId"
      opponentUserId:
        type: integer
        description: "상대방의 UserId"

  Answer:
    type: object
    properties:
      answer:
        type: integer
      gameType:
        type: string
        enum: 
          - "random"
          - "single"
          - "friend"
      elapsedTime:
        type: integer
        description: "푼 시간 초"

  Topic:
    type: object
    properties:
      gameId:
        type: integer
      topicName:
        type: string

  Game:
    type: object
    properties:
      gameName:
        type: string

  GameResult:
    type: object
    properties:
      winnerUserId:
        type: integer
      loserUserId:
        type: integer

  Questionaire:
    type: object
    properties:
      topicId:
        type: integer
      questionaireName:
        type: string

  UpdateQuestionaire:
    type: object
    properties:
      questionaireId:
        type: integer
      questionaireName:
        type: string

  QuestionItem:
    type: object
    properties:
      questionaireId:
        type: integer
      number:
        type: integer
      content:
        type: string
      example:
        type: string
      case1:
        type: string
      case2:
        type: string
      case3:
        type: string
      case4:
        type: string
      case5:
        type: string
      answer:
        type: integer
      limitTime:
        type: integer
  
  Check:
    type: object
    properties:
      email:
        type: string

  Nickname:
    type: object
    properties:
      nickname:
        type: string

  User:
    type: object
    properties:
      nickname: 
        type: string
      accessToken:
        type: string
      facebookUserId:
        type: string
      loginType:
        type: string
        enum: 
          - "facebook"
          - "signUp"
      character:
        type: string
        enum: 
          - "ow"
          - "om" 
          - "yw"   
          - "ym"            
      registraionId:
        type: string
      email:
        type: string
      password:
        type: string
      name:
        type: string
      gender:
        type: string
      birth:
        type: string
      address:
        type: string
      phone:
        type: string
  
  Transaction:
    type: object
    properties:
      star:
        type: integer
      productName:
        type: string
        description: "예 -> 별 5개 ..."
      price:
        type: integer
        description: "가격"
  
  UserQuestionItem:
    type: object
    properties:
      userId:
        type: integer
      content:
        type: string

  ExampleBody:
    type: object
    title: example
    required:
      - name
    properties:
      name:
        type: string
        description: The example name

paths:
  /user/withdrawal/history:
    post:
      tags:
        - User
      description: 탈퇴한 사람들 기록 조회
      parameters:
        - name: "body"
          in: "body"
          schema:
            $ref: "#/definitions/DateModel"
      responses:
        200:
          description: OK!
        500:
          description: KO!

  /user/login:
    post:
      tags:
        - User
      description: 로그인 API
      parameters:
        - name: "body"
          in: "body"
          schema:
            $ref: "#/definitions/LoginModel"
      responses:
        200:
          description: OK!
        500:
          description: KO!
  
  /receipt:
    get:
      tags:
        - Receipt
      description: 영수증 불러오기
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
  
  /receipt/{userId}:
    post:
      tags:
        - Receipt
      description: 영수증 생성
      parameters:
        - in: "body"
          name: "body"
          schema:
            $ref: "#/definitions/ReceiptModel"
        - in: "path"
          name: userId
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /term:
    post:
      tags:
        - Term
      description: 약관 생성
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/TermModel"
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
    get:
      tags:
        - Term
      description: 약관 조회
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
  /term/{termId}:
    put:
      tags:
        - Term
      description: 약관 수정
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/TermModel"
        - in: path
          name: termId
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
    
    delete:
      tags:
        - Term
      parameters:
        - in: path
          name: termId
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /admin/userInfo:
    post:
      tags:
        - Admin
      description: 관리자로서 사용자의 조건에 따라 정보를 조회한다.
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/UserInfoByConditionModel"
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /admin/sendProblemAnswer:
    post:
      tags:
        - Admin
      description: 관리자로서 사용자 문의에 대한 답변을 보낸다.
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/AdminProblemAnswerModel"
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /admin/sendStar:
    post:
      tags:
        - Admin
      description: 관리자로서 별을 보낸다.
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/AdminSendStarModel"
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /admin/{userId}/messages:
    get:
      tags:
        - Admin
      description: 사용자의 알림 목록을 조회한다.
      parameters:
        - in: path
          name: userId
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /admin/sendMessage:
    post:
      tags:
        - Admin
      description: 관리자로서 별을 보낸다.
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/AdminSendMessageModel"
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
  
  /admin/{userId}/{notificationId}/readMessage:
    post:
      tags:
        - Admin
      description: 메시지를 읽는다.
      parameters:
        - in: path
          name: userId
        - in: path
          name: notificationId
          type: string
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /admin/login:
    post:
      tags:
        - Admin
      description: 관리자 계정 로그인
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/AdminLoginModel"
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /admin/account:
    post:
      tags:
        - Admin
      description: 관리자 계정 생성
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/AdministratorModel"
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
          
  /admin/withdrawal:
    get:
      tags:
        - Admin
      description: 모든 사용자의 탈퇴 기록을 살펴본다.
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /admin/connection:
    get:
      tags:
        - Admin
      description: 모든 사용자의 최근 접속 기록을 살펴본다.
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /fcm/sendToAllDevice:
    post:
      tags:
        - FCM
      parameters:
        - in: body
          name: body
          description: "FCM Message Payload Model"
          schema:
            $ref: "#/definitions/MessagePayloadModel"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK!"

  /fcm/{userId}/sendToDevice:
    post:
      tags:
        - FCM
      parameters:
        - in: path
          name: userId
          description: UserId

        - in: body
          name: body
          description: "FCM Message Payload Model"
          schema:
            $ref: "#/definitions/MessagePayloadModel"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK!"

  /stuff:
    post:
      tags:
        - Stuff
      consumes:
        - "multipart/form-data"
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: formData
          name: eventImage
          type: file
          description: The file to upload.
        - in: query
          name: description
          type: string
          description: 상품 설명
        - in: query
          name: active
          type: integer
          description: '0: 비활성화 1: 활성화'
        - in: query
          name: status
          type: integer
          description: '0: 아무데도 속하지 않음 1: 이번주 2: 다음주'
      responses:
        500:
          description: "KO!"
        200:
          description: "OK"

    get:
      tags:
        - Stuff 
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /stuff/all:
    get:
      tags:
        - Stuff 
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
    
  /stuff/{stuffId}:
    put:
      tags:
        - Stuff
      parameters:
        - in: path
          name: stuffId
          description: 상품 Id
        - in: query
          name: isActive
          description: 활성화 여부
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
    delete:
      tags:
        - Stuff
      parameters:
        - in: path
          name: stuffId
          type: integer
          description: '상품 Id'
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /stuff/{userId}/pay:
    get:
      tags:
        - Stuff
      parameters:
        - in: path
          name: userId
          type: integer
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
  
  /stuff/{userId}/{stuffId}/pay:
    post:
      tags:
        - Stuff
      parameters:
        - in: path
          name: userId
          type: integer
        - in: path
          name: stuffId
          type: integer
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /advertise:
    get:
      tags:
        - Advertise
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"
    post:
      tags:
        - Advertise
      description: "광고 정보 생성"
      parameters:
        - in: "body"
          name: "body"
          description: "Advertise Object"
          required: true
          schema:
            $ref: "#/definitions/AdvertiseModel"
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"

  /advertise/{advertiseId}:
    put:
      tags:
        - Advertise
      description: "광고 정보 편집"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/AdvertiseModel"
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"
    delete:
      tags:
        - Advertise
      description: "광고 정보 삭제"
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"

  /advertise/{advertiseId}/{userId}/watch:
    post:
      tags:
        - Advertise
      description: "사용자의 광고 시청"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/StarModel"

      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"

  /advertise/{advertiseId}/watch:
    post:
      tags:
        - Advertise
      description: "AdvertiseId 광고를 시청한 사용자 목록."
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"

  
  /problem/{userId}:
    get:
      tags:
        - Problem
      parameters:
        - in: path
          name: userId
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"
  
  /problem:
    get:
      tags:
        - Problem
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"
    post:
      tags:
        - Problem
      consumes:
        - "multipart/form-data"
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: formData
          name: appImage
          type: file
          description: The file to upload.
        - in: query
          name: email
          type: string
          description: email
        - in: query
          name: question
          type: string
          description: question
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"

  /qna:
    get:
      tags:
        - AppQnA
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"
    post:
      tags:
        - AppQnA
      consumes:
        - "multipart/form-data"
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: formData
          name: appImage
          type: file
          description: The file to upload.
        - in: query
          name: email
          type: string
          description: email
        - in: query
          name: question
          type: string
          description: question
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"

  /faq:
    post:
      tags:
        - FAQ
      description: "FAQ 를 생성함."
      parameters:
        - in: "body"
          name: "body"
          description: "FAQ Object"
          required: true
          schema:
            $ref: "#/definitions/FaqModel"
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"
    get:
      tags:
        - FAQ
      description: "FAQ 을 조회함."
      responses:
        200:
          description: "OK!"
        500:
          description: "Exception"
 
  /faq/{faqId}:
    put:
      tags:
        - FAQ
      description: "FAQ 수정"
      parameters:
        - in: "body"
          name: "body"
          description: "FAQ Object"
          required: true
          schema:
            $ref: "#/definitions/FaqModel"
        - in: path
          name: faqId
          type: integer
      responses:
        200:
          description: "OK!"
        500:
          description: "Exception"
    delete:
      tags:
        - FAQ
      description: "FAQ 삭제"
      parameters:
        - in: path
          name: faqId
          type: integer
      responses:
        200:
          description: "OK!"
        500:
          description: "Exception"

  /game:
    get:
      tags:
        - Game
      description: "Game 정보에 대한 리스트를 불러오기"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"

  /game/{userId}/history:
    get:
      tags:
        - Game
      description: "사용자 게임 플레이 전적 조회"
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /game/rank/{userId}:
    get:
      tags:
        - Game
      description: "사용자의 주간 점수 및 게임 랭킹을 조회한다."
      parameters:
        - in: query
          name: startDate
          type: string
          description: 'YYYY-MM-DD 형식임. 조회할 랭킹 범위의 시작점'
        - in: query
          name: endDate
          type: string
          description: 'YYYY-MM-DD 형식임. 조회할 랭킹 범위의 끝점'
        - in: path
          name: userId
          type: integer
          description: "사용자 Id"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"

  /game/getRank:
    get:
      tags:
        - Game
      description: "탑 50 게임 및 점수 랭킹을 불러온다."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: query
          name: rankType
          type: string
          description: 주간 게임 순위의 경우 gameRanking 을, 주간 점수 순위의 경우 answerRanking 을 기입.
        - in: query
          name: startDate
          type: string
          description: 'YYYY-MM-DD 형식임. 조회할 랭킹 범위의 시작점'
        - in: query
          name: endDate
          type: string
          description: 'YYYY-MM-DD 형식임. 조회할 랭킹 범위의 끝점'
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"

  /game/playingHistory:
    post:
      tags:
        - Game
      description: "게임 플레잉 기록을 저장하며, 랭킹에 꼭 필요하니 반드시 해야함."
      parameters:
        - in: body
          name: body
          description: "PlayingHistory Object"
          schema:
            $ref: "#/definitions/GamePlayingHistoryModel"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK!"

  /game/{userId}/playingHistory:
    get:
      tags:
        - Game
      description: "게임 플레잉 기록을 가져온다."
      parameters:
        - in: path
          name: userId
          description: "userId"
      responses:
        500:
          description: "Exception!"
        200:
          description: "OK!"

  /game/setResult:
    post:
      tags:
        - Game
      description: "게임 결과를 저장한다."
      parameters:
        - in: "body"
          name: "body"
          description: "Game Result Object"
          required: true
          schema:
            $ref: "#/definitions/GameResult"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"

  /game/{gameId}:
    get:
      tags:
        - Game
      description: "Game 정보를 가져옴."
      parameters:
        - in: path
          name: gameId
          description: "gameId"
          required: true
          type: integer
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"

  /game/createGame:
    post:
      tags:
        - Game
      description: "Game 을 생성함."
      parameters:
        - in: "body"
          name: "body"
          description: "Game Object"
          required: true
          schema:
            $ref: "#/definitions/Game"
      responses:
        500: 
          description: "Exception"
        200:
          description: "OK!"

  /topic:
    get:
      tags:
        - Topic
      description: "Topic 목록을 가져온다."
      responses:
        500:
          description: "Exception!"
        200:
          description: "OK!"

  /topic/{topicId}:
    get:
      tags:
        - Topic
      description: "Topic Id 정보를 가져온다."
      parameters:
        - in: path
          name: topicId
          description: "topicId"
          required: true
          type: integer
      responses:
        500:
          description: "Exception!"
        200:
          description: "OK!"

  /topic/createTopic:
    post:
      tags:
        - Topic
      description: "생성된 Game 에 Topic 을 생성한다."
      parameters:
        - in: "body"
          name: "body"
          description: "Topic Object"
          required: true
          schema: 
            $ref: "#/definitions/Topic"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK!"

  /questionaire/items/limitTime:
    post:
      tags:
        - Questionaire
      description: 문제 제한 시간 일괄 변경
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UpdateQuestionItemsLimitTime"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK!"

  /questionaire:
    get:
      tags:
        - Questionaire
      description: 문제지 목록을 가져온다.
      responses:
        500:
          description: "Exception"
        200:
          description: "Ok!"
    put:
      tags:
        - Questionaire
      description: 문제지 정보를 수정한다.
      parameters:
        - in: body
          name: body
          required: true
          description: "수정하고자 하는 Questionaire Model"
          schema:
            $ref: "#/definitions/UpdateQuestionaire"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK!"

  /questionaire/{questionaireId}/all:
    delete:
      tags:
        - Questionaire
      description: 문제를 삭제한다.
      parameters:
        - in: path
          name: questionaireId
          description: "질문지 Id"
          required: true
          type: integer
      responses:
        500:
          description: "Exception"
        200:
          description: "Ok!"

  /questionaire/{questionaireId}:
    get:
      tags:
        - Questionaire
      description: 문제지의 정보와 문제지의 모든 문제를 조회한다.
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: questionaireId
          description: "질문지 Id"
          required: true
          type: integer
        - in: query
          description: "몇 개 불러올 것인지, 전부 부르고 싶으면 값을 비우면 됨."
          name: limit
          type: integer
      responses:
        500:
          description: "Exception"
        200:
          description: "Ok!"
    delete:
      tags:
        - Questionaire
      description: 문제를 삭제한다.
      parameters:
        - in: path
          name: questionaireId
          description: "질문지 Id"
          required: true
          type: integer
      responses:
        500:
          description: "Exception"
        200:
          description: "Ok!"

  /questionaire/item/{questionItemId}:
    delete:
      tags:
        - Questionaire
      description: 문제 아이템 정보를 삭제한다.
      parameters:
        - in: path
          name: questionItemId
          description: 문제 아이템 Id
          type: integer
      responses:
        500:
          description: "Exception"
        200:
          description: "Ok!"
    put:
      tags:
        - Questionaire
      description: 문제 아이템 정보를 수정한다.
      parameters:
        - in: path
          name: questionItemId
          description: 문제 아이템 Id
          type: integer
        - in: body
          name: body
          description: 수정하고자하는 문제 아이템 모델
          schema:
            $ref: "#/definitions/QuestionItem"
      responses:
        500:
          description: "Exception"
        200:
          description: "Ok!"

  /questionaire/create:
    post:
      tags:
        - Questionaire
      description: "Topic 에 문제지를 생성."
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Questionaire Object"
          required: true
          schema:
            $ref: "#/definitions/Questionaire"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK!"

  /questionaire/{userId}/{questionItemId}/answers:
    post:
      tags:
        - Questionaire
      description: "정답을 확인한다."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: userId
          in: path
          required: true
          description: userId
          type: integer

        - name: questionItemId
          in: path
          required: true
          description: questionItemId
          type: integer

        - name: body
          in: body
          required: true
          description: body
          schema:
            $ref: "#/definitions/Answer"
      
      responses:
        500:
          description: "Exception"
        200:
          description: "OK!"

  /questionaire/{questionaireId}/addQuestionItem:
    post:
      tags:
        - Questionaire
      description: "questionaireId 에 속하는 질문지에 문제를 추가한다."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: questionaireId
          in: path
          required: true
          description: questionaireId
          type: integer

        - name: body
          in: body
          description: "QuestionItem Object"
          required: true
          schema:
            $ref: "#/definitions/QuestionItem"
      responses:
        500:
          description: "Exception!"
        200: 
          description: "OK!"

  /user/{userId}/scores:
    get:
      tags:
        - User
      description: 나의 총 승/패, 점수 정보 조회
      parameters:
        - in: path
          name: userId
      responses:
        200:
          description: "OK"
        500:
          description: "KO!"
  
  /user/getPlayers:
    get:
      tags:
        - User
      description: fetch player information
      parameters:
        - in: query
          name: me
          required: true
        - in: query
          name: opponent
          required: true
      responses:
        200:
          description: "OK"
        500:
          description: "KO!"

  /user/question:
    post:
      tags:
        - User
      description: Create User Question
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/UserQuestionItem"
      responses:
        200:
          description: "OK!"
        500:
          description: "KO!"
    get:
      tags:
        - User
      description: Fetch all user questions
      responses:
        200:
          description: "OK!"
        500:
          description: "KO!"

  /user/{userId}/withdrawal:
    delete:
      tags:
        - User
      description: User Withdrawal
      parameters:
        - in: path
          name: userId
          description: userId
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"
  
  /user/{userId}/friends:
    get:
      tags:
        - User
      description: fetching friend of user
      parameters:
        - in: path
          name: userId
      responses:
        200: 
          description: "OK!"
        500:
          description: "KO!"

  /user/{userId}/syncFacebookFriends:
    post:
      tags:
        - User
      description: Syncing the Frineds who are using Facebook Social Login
      parameters:
        - in: path
          name: userId

        - in: body
          name: body
          schema:
            $ref: "#/definitions/FriendsModel"
      responses:
        500:
          description: "KO!"
        200:
          description: "OK!"

  /user/email/check:
    post:
      tags:
        - User
      description: 이메일 중복 여부 체크
      parameters:
        - in: "body"
          name: "body"
          description: "Email"
          required: true
          schema:
            $ref: "#/definitions/Check"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"
  
  /user/nickname/check:
    post:
      tags:
        - User
      description: 이메일 중복 여부 체크
      parameters:
        - in: "body"
          name: "body"
          description: "Nickname"
          required: true
          schema:
            $ref: "#/definitions/Nickname"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"
        
  /user/join:
    post:
      tags:
        - User
      description: User Join Function
      consumes: 
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"

  /user/refreshToken:
    put:
      tags:
        - User
      description: User Token Refresh
      parameters:
        - in: "body"
          name: "body"
          required: true
          description: "Token Model"
          schema:
            $ref: "#/definitions/TokenModel"
          
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"

  /user/{userId}/star:
    put:
      tags:
        - User
      description: User Buy Star
      parameters:
        - in: body
          name: body
          description: "User object"
          required: true
          schema:
            $ref: "#/definitions/Transaction"
        
        - name: userId
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"

  /user/{userId}/heart:
    put:
      tags:
        - User
      description: User Using Heart
      consumes:
        - "application/json"
      produces:
        - "application/json"
      
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
          
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"
        204:
          description: "Heart is 0"

  /user/{userId}/wrongAnswers:
    get:
      tags:
        - User
      description: userId 의 사용자가 잘못 풀은 최근 문제 50개를 불러온다.
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: userId
          in: path
          required: true
          description: userId
          type: integer
      responses:
        200:
          description: "OK"
        500:
          description: "Exception"    

  /user/{userId}/notifications:
    get:
      tags:
        - User
      description: 사용지의 메시지 함을 조회한다.
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "OK"
        500:
          description: "Exception"

  /user/{userId}/answers:
    get:
      tags:
        - User
      description: userId 의 사용자가 풀었던 문제들을 불러온다.
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: userId
          in: path
          required: true
          description: userId
          type: integer
      responses:
        200:
          description: "OK"
        500:
          description: "Exception"

  /user/{userId}:
    get:
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
      responses:
        200:
          description: Return the example with the specified id
        500:
          description: KO!
    put:
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          type: integer

        - name: body
          in: body
          schema: 
            $ref: "#/definitions/User"
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"
    post:
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
      responses:
        500:
          description: "Exception"
        200:
          description: "OK"
  
  /user:
    get:
      tags: 
        - User
      description: 전체 유저의 데이터를 볼 수 있습니다.
      responses:
        500:
          description: "Exception"
        200:
          description: OK 

  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
